require 'configFiles.levelData'
require 'configFiles.sound'

local function buttonUnpress(button)
	gui.set_enabled(gui.get_node(button .. "/buttonDown"), false)
	gui.set_enabled(gui.get_node(button .. "/buttonUp"), true)
end

local function buttonPress(button)
	gui.set_enabled(gui.get_node(button .. "/buttonDown"), true)
	gui.set_enabled(gui.get_node(button .. "/buttonUp"), false)
end

local function setLabelText ()
	gui.set_text(gui.get_node("buttonStart/label_down"), "Играть")
	gui.set_text(gui.get_node("buttonStart/label_up"), "Играть")
	gui.set_text(gui.get_node("buttonQuit/label_down"), "Выйти")
	gui.set_text(gui.get_node("buttonQuit/label_up"), "Выйти")
end

function init(self)
	msg.post("#", "acquire_input_focus")
	msg.post("@render:", "use_fixed_projection", { near = -1, far = 1, zoom = 2 })
	self.buttons =  {"buttonStart", "buttonQuit"}
	setLabelText()
	self.loaded_proxy = nil	
end

function on_message(self, message_id, message, sender)
	local mainMenu = "mainMenu"
	local background = "background"
	if message_id == hash("proxy_loaded") then
		msg.post(sender, "init")
		msg.post(sender, "enable")
		self.pushed_button = nil		
		msg.post("#", "release_input_focus")
		msg.post(mainMenu, "disable")
		msg.post(background, "disable")
		self.loaded_proxy = sender
	elseif message_id == hash("back") then
		msg.post(self.loaded_proxy, "disable")
		msg.post(self.loaded_proxy, "final")
		msg.post(self.loaded_proxy, "unload")
		msg.post("@render:", "clear_color", { color = vmath.vector4(0, 0, 0, 1) } )
		msg.post("@render:", "no_camera")
		msg.post("@render:", "set_render_update", { update = hash("2d") })
		msg.post(mainMenu, "enable")
		msg.post(background, "enable")
		msg.post("#", "acquire_input_focus")
	elseif message_id == hash("next_level") then
		msg.post(self.loaded_proxy, "disable")
		msg.post(self.loaded_proxy, "final")
		msg.post(self.loaded_proxy, "unload")
		msg.post(background, "enable")
		self.next_level = true
	elseif message_id == hash("proxy_unloaded") and self.next_level then
		msg.post("main:/loader#proxy-gameField", "load")	
		self.next_level = false
	end
end

function on_input(self, action_id, action)
	local touch = hash("touch")
	if action_id == touch and action.pressed == true then
		local x = action.x
		local y = action.y
		for _, button in ipairs(self.buttons) do
			if gui.pick_node(gui.get_node(button .. "/buttonDown" ), x, y) then
				self.pushed_button = button
				buttonPress(button)
				play_sound("/sound#buttonClick", "play_sound")
			end
		end
	elseif action_id == touch and action.released then
		for _, button in pairs(self.buttons) do
			buttonUnpress(button)
		end
		if self.pushed_button == "buttonQuit" then
			os.exit()
		elseif self.pushed_button == "buttonStart" then
			msg.post("/loader#proxy-gameField", "load")
		end
	end
end

function on_reload(self)
	msg.post(".", "back")
end
